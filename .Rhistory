"<u>Date de plantation : </u>", date_de_plantation, "<br>",
"<br>", pourquoi_classif
),
group = "XXe"
) %>%
addMarkers(
data = subset(arbres_sf, `XXIe_siecle` == TRUE),
popup = ~paste(
"<b>", Nom_usuel, "</b> (<i>", Nom_botanique, "</i>)", "<br>",
"<img src='", lien_photo, "' width='200'><br>",
"<i>Crédits image : </i>", auteur_photo, "<br>",
"<u>Description : </u>", infos, "<br>",
"<u>Circonférence : </u>", circonference, " cm", "<br>",
"<u>Hauteur : </u>", hauteur, " m", "<br>",
"<u>Adresse : </u>", Adresse, ", ", complement, "<br>",
"<u>Date de plantation : </u>", date_de_plantation, "<br>",
"<br>", pourquoi_classif
),
group = "XXIe"
) %>%
# Ajouter le contrôle des calques
addLayersControl(
overlayGroups = c("XVIe", "XVIIIe", "XIXe", "XXe", "XXIe"),
options = layersControlOptions(collapsed = TRUE)
) %>%
# Définir la vue de la carte
setView(lng = 2.3522, lat = 48.8566, zoom = 12)
arbres_fulldata <- read_csv("data/tableau_complet.csv")
arbres_sf <- st_as_sf(arbres_fulldata, coords = c("longitude", "latitude"), crs = 4326)
icon_custom <- makeIcon(
iconUrl = "https://cdn0.iconfinder.com/data/icons/trees-19/50/11-512.png",
iconWidth = 20, iconHeight = 20,
iconAnchorX = 15, iconAnchorY = 30
)
carte_fullarbres <- leaflet(arbres_sf) %>%
addTiles() %>%
addMarkers(
popup = ~paste(
"<b>", Nom_usuel, "</b> (<i>", Nom_botanique, "</i>)", "<br>",
"<img src='", lien_photo, "' width='200'><br>",
"<i>Crédits image : </i>", auteur_photo, "<br>",
"<u>Description : </u>", infos, "<br>",
"<u>Circonférence : </u>", circonference, " cm", "<br>",
"<u>Hauteur : </u>", hauteur, " m", "<br>",
"<u>Adresse : </u>", Adresse, ", ", complement, "<br>",
"<u>Date de plantation : </u>", date_de_plantation, "<br>",
"<br>",
pourquoi_classif
),
icon = icon_custom
) %>%
setView(lng = 2.3522, lat = 48.8566, zoom = 12)
carte_fullarbres <- leaflet(arbres_sf) %>%
addLayersControl(overlayGroups = c("XVIe", "XVIIIe", "XIXe", "XXe", "XXIe"),
options = layersControlOptions(collapsed = TRUE))
carte_fullarbres
carte_fullarbres <- leaflet(arbres_sf) %>%
addLayersControl(overlayGroups = c("jardin", "cimetiere", "bois_de_boulogne", "bois_de_vincennes", "voie_publique", "espace_vert_prive"),
options = layersControlOptions(collapsed = TRUE))
carte_fullarbres
arbres_fulldata <- read_csv("data/tableau_complet.csv")
arbres_sf <- st_as_sf(arbres_fulldata, coords = c("longitude", "latitude"), crs = 4326)
icon_custom <- makeIcon(
iconUrl = "https://cdn0.iconfinder.com/data/icons/trees-19/50/11-512.png",
iconWidth = 20, iconHeight = 20,
iconAnchorX = 15, iconAnchorY = 30
)
carte_fullarbres <- leaflet(arbres_sf) %>%
addTiles() %>%
addMarkers(
popup = ~paste(
"<b>", Nom_usuel, "</b> (<i>", Nom_botanique, "</i>)", "<br>",
"<img src='", lien_photo, "' width='200'><br>",
"<i>Crédits image : </i>", auteur_photo, "<br>",
"<u>Description : </u>", infos, "<br>",
"<u>Circonférence : </u>", circonference, " cm", "<br>",
"<u>Hauteur : </u>", hauteur, " m", "<br>",
"<u>Adresse : </u>", Adresse, ", ", complement, "<br>",
"<u>Date de plantation : </u>", date_de_plantation, "<br>",
"<br>",
pourquoi_classif
),
icon = icon_custom
) %>%
setView(lng = 2.3522, lat = 48.8566, zoom = 12)
arbres_fulldata <- read_csv("data/tableau_complet.csv")
arbres_sf <- st_as_sf(arbres_fulldata, coords = c("longitude", "latitude"), crs = 4326)
icon_custom <- makeIcon(
iconUrl = "https://cdn0.iconfinder.com/data/icons/trees-19/50/11-512.png",
iconWidth = 20, iconHeight = 20,
iconAnchorX = 15, iconAnchorY = 30
)
carte_fullarbres <- leaflet(arbres_sf) %>%
addTiles() %>%
addMarkers(
popup = ~paste(
"<b>", Nom_usuel, "</b> (<i>", Nom_botanique, "</i>)", "<br>",
"<img src='", lien_photo, "' width='200'><br>",
"<i>Crédits image : </i>", auteur_photo, "<br>",
"<u>Description : </u>", infos, "<br>",
"<u>Circonférence : </u>", circonference, " cm", "<br>",
"<u>Hauteur : </u>", hauteur, " m", "<br>",
"<u>Adresse : </u>", Adresse, ", ", complement, "<br>",
"<u>Date de plantation : </u>", date_de_plantation, "<br>",
"<br>",
pourquoi_classif
),
icon = icon_custom
) %>%
setView(lng = 2.3522, lat = 48.8566, zoom = 12)
carte_fullarbres
library(GGally)
table_arbres <- read.csv ('data/tableau_complet.csv')
View(table_arbres)
ggplot(data = table_arbres, aes(domanialite)) + geom_bar()
ggplot(data = table_arbres, aes(x = domanialite, y = arrondissement))  +
geom_boxplot() +
geom_jitter()
ggplot(data = table_arbres, aes(x = domanialite, fill = domanialite))  +
geom_density(alpha = .3)
library(plotly)
fig <-
ggplot(data = table_arbres, aes(x = domanialite, y = arrondissement, colour = Type, size = arrondissement)) +
geom_point(alpha = 0.5) +
theme_bw()
ggplotly(fig)
arbres_fulldata <- read_csv("data/tableau_complet.csv")
arbres_sf <- st_as_sf(arbres_fulldata, coords = c("longitude", "latitude"), crs = 4326)
icon_custom <- makeIcon(
iconUrl = "https://cdn0.iconfinder.com/data/icons/trees-19/50/11-512.png",
iconWidth = 20, iconHeight = 20,
iconAnchorX = 15, iconAnchorY = 30
)
carte_fullarbres <- leaflet(arbres_sf) %>%
addTiles() %>%
addMarkers(
popup = ~paste(
"<b>", Nom_usuel, "</b> (<i>", Nom_botanique, "</i>)", "<br>",
"<img src='", lien_photo, "' width='200'><br>",
"<i>Crédits image : </i>", auteur_photo, "<br>",
"<u>Description : </u>", infos, "<br>",
"<u>Circonférence : </u>", circonference, " cm", "<br>",
"<u>Hauteur : </u>", hauteur, " m", "<br>",
"<u>Adresse : </u>", Adresse, ", ", complement, "<br>",
"<u>Date de plantation : </u>", date_de_plantation, "<br>",
"<br>",
pourquoi_classif
),
icon = icon_custom
) %>%
setView(lng = 2.3522, lat = 48.8566, zoom = 12)
carte_fullarbres <- leaflet(arbres_sf) %>%
addLayersControl(overlayGroups = c("XVIe", "XVIIIe", "XIXe", "XXe", "XXIe"),
options = layersControlOptions(collapsed = TRUE))
carte_fullarbres
ggplot(data = table_arbres, aes(x = arrondissement)) +
geom_histogram(fill = "#69b3a2", color = "#e9ecef", alpha = 0.7, binwidth = 0.5)
ggplot(data = table_arbres, aes(x = Type)) +
geom_histogram(fill = "#5bb83b", color = "#e9ecef", alpha = 0.7, binwidth = 0.5)
ggplot(data = table_arbres, aes(x = arrondissement)) +
geom_histogram(fill = "#69b3a2", color = "#e9ecef", alpha = 0.7, binwidth = 0.5)
ggplot(data = table_arbres, aes(x = Type)) +
geom_histogram(fill = "#5bb83b", color = "#e9ecef", alpha = 0.7, binwidth = 0.5)
ggplot(data = table_arbres, aes(x = domanialite)) +
geom_histogram(fill = "#5bb83b", color = "#e9ecef", alpha = 0.7, binwidth = 0.5)
ggplot(data = table_arbres, aes(x = arrondissement,
y = domanialite,
colour = Type,
size = hauteur))  +
geom_point() +
labs(x = "Arrondissements", y = "Domanialité",
title = "Localisation des arbres remarquables à Paris",
subtitle = "selon l'arrondissement et la domanialité",
caption = "Data de idf data") +
theme_minimal()
ggplot(data = table_arbres, aes(x = arrondissement,
y = Type,
colour = domanialite,
size = hauteur))  +
geom_point() +
labs(x = "Arrondissements", y = "Domanialité",
title = "Localisation des arbres remarquables à Paris",
subtitle = "selon l'arrondissement et la domanialité",
caption = "Data de idf data") +
theme_minimal()
library(visNetwork)
library(tidyverse)
# Load data from CSV files
nodes_vis <- read_csv("data/nodes_arbres-2.csv")
edges_vis <- read_csv("data/edges_arbres-2.csv")
# Simple interactive plot using visNetwork
visNetwork(nodes, edges, width = "100%") %>%
visGroups(groupname = "A", color = "red") %>%
visGroups(groupname = "B", color = "lightblue") %>%
visLegend(width = 0.1, position = "right", main = "Group")
# Interactive plot with customized edge width and layout
visNetwork(nodes,
edges,
width = "100%") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "middle")
visNetwork(nodes,
edges,
main = "Hopla",
height = "500px",
width = "100%")
visNetwork(nodes_vis,
edges_vis,
main = "Hopla",
height = "500px",
width = "100%")
# Load data from CSV files
nodes_vis <- read_csv("data/nodes_arbres-2.csv")
edges_vis <- read_csv("data/edges_arbres-2.csv")
visNetwork(nodes_vis,
edges_vis,
main = "Hopla",
height = "500px",
width = "100%")
# Load data from CSV files
nodes_vis <- read_csv("data/nodes_arbres-2.csv")
visNetwork(nodes_vis,
edges_vis,
main = "Hopla",
height = "500px",
width = "100%")
# 1. Highlight nearest nodes
visNetwork(nodes_vis, edges_vis, height = "500px", width = "100%") %>%
visOptions(highlightNearest = TRUE) %>%
visLayout(randomSeed = 123)
# Load data from CSV files
nodes_vis <- read_csv("data/nodes_arbres-2.csv")
# 1. Highlight nearest nodes
visNetwork(nodes_vis, edges_vis, height = "500px", width = "100%") %>%
visOptions(highlightNearest = TRUE) %>%
visLayout(randomSeed = 123)
# 2. Select by node ID
visNetwork(nodes_vis, edges_vis, height = "500px", width = "100%") %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visLayout(randomSeed = 123)
# 5. Customize options for node selection and highlighting
visNetwork(nodes_vis, edges_vis, height = "500px", width = "100%") %>%
visOptions(highlightNearest = TRUE,
nodesIdSelection = list(enabled = TRUE,
selected = "8",
values = c(5:10),
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: darkblue;
border:none;
outline:none;')) %>%
visLayout(randomSeed = 123)
# 6. Enable data manipulation features
visNetwork(nodes_vis, edges_vis, height = "500px", width = "100%") %>%
visOptions(manipulation = TRUE) %>%
visLayout(randomSeed = 123)
# 7. Use igraph layout for network visualization
visNetwork(nodes_vis, edges_vis, height = "500px") %>%
visIgraphLayout() %>%
visNodes(size = 10)
# Use igraph layout with a circular arrangement
visNetwork(nodes_vis, edges_vis, height = "500px") %>%
visIgraphLayout(layout = "layout_in_circle") %>%
visNodes(size = 10) %>%
visOptions(highlightNearest = list(enabled = T, hover = T),
nodesIdSelection = T)
# Load the required libraries for mapping and spatial data manipulation
library(leaflet)
library(sp)
library(sf)
# Lire les fichiers Shapefile
nodes <- st_read("shp/map_nodes_shp2.shp")
edges <- st_read("shp/map_edges_shp2.shp")
# Extraire les coordonnées des nœuds
coordinates_nodes <- st_coordinates(nodes)
# Extraire la première coordonnée des arêtes (point de départ de chaque arête)
coordinates_edges <- st_coordinates(edges)
first_coordinates_edges <- coordinates_edges[seq(1, nrow(coordinates_edges), by = 2), ]  # Prendre un point de départ pour chaque arête
# Ajouter les coordonnées comme colonnes au dataframe des nœuds
nodes$longitude <- coordinates_nodes[,1]
nodes$latitude <- coordinates_nodes[,2]
# Ajouter les coordonnées comme colonnes au dataframe des arêtes (premier point)
edges$longitude <- first_coordinates_edges[,1]
edges$latitude <- first_coordinates_edges[,2]
# Convertir les colonnes en UTF-8
nodes$Label <- iconv(nodes$Label, from = "latin1", to = "UTF-8")
nodes$descriptio <- iconv(nodes$descriptio, from = "latin1", to = "UTF-8")
nodes$image <- iconv(nodes$image, from = "latin1", to = "UTF-8")
# Créer la carte Leaflet
leaflet(data = nodes) %>%
addTiles() %>%  # Ajouter une couche de base
addMarkers(~longitude, ~latitude,
icon = ~icons(iconUrl = image, iconWidth = 50, iconHeight = 50),
popup = ~paste("<b>", Label, "</b><br>",
"<img src='", image, "' width='100' height='100'><br>",
descriptio)) %>%
# Afficher les arêtes (edges) comme des polylignes
addPolylines(data = edges,
lat = ~latitude, lng = ~longitude,
color = "blue",
weight = 2)
library(dplyr)
library(readr)
# Charger les packages
library(leaflet)
nodes <- read_csv ("data/nodes_arbres.csv")
edges <- read_csv ("data/edges_arbres.csv")
# Carte de base avec Leaflet
map <- leaflet(nodes) %>%
addTiles() %>%
addCircleMarkers(
~lon, ~lat,  # coordonnées des noeuds
popup = ~paste("<b>", label, "</b><br>",
"<i>", precisions, "</i><br>", # Afficher le label en gras
"<img src='", image, "' width='100' height='100'><br>",  # Afficher l'image
"Origine de l'arbre : <b>", origine, "</b><br>",
descriptions),  # Afficher la description
radius = ~weight / 2,
color = "green",
stroke = FALSE,
fillOpacity = 0.7
)
# Afficher la carte
map
# Ajouter les arêtes (lignes entre les noeuds)
for (i in 1:nrow(edges)) {
source_node <- nodes[nodes$id == edges$source[i], ]
target_node <- nodes[nodes$id == edges$target[i], ]
map <- map %>%
addPolylines(
lng = c(source_node$lon, target_node$lon),
lat = c(source_node$lat, target_node$lat),
color = "blue",
weight = 2
)
}
View(nodes)
# Carte de base avec Leaflet
map <- leaflet(nodes) %>%
addTiles() %>%
addCircleMarkers(
~lon, ~lat,  # coordonnées des noeuds
popup = ~paste("<b>", label, "</b><br>",
"<i>", precisions, "</i><br>", # Afficher le label en gras
"<img src='", image, "' width='100' height='100'><br>",  # Afficher l'image
"Origine de l'arbre : <b>", origine, "</b><br>",
descriptions),
radius = ~weight / 2,
color = "green",
stroke = FALSE,
fillOpacity = 0.7
)
# Afficher la carte
map
# Carte de base avec Leaflet
map <- leaflet(nodes) %>%
addTiles() %>%
addCircleMarkers(
~lon, ~lat,  # coordonnées des noeuds
popup = ~paste("<b>", label, "</b><br>",
"<i>", precisions, "</i><br>", # Afficher le label en gras
"<img src='", image, "' width='100' height='100'><br>",  # Afficher l'image
"Origine de l'arbre : <b>", origine, "</b><br>",
descriptions),
radius = ~weight / 2,
color = "green",
stroke = FALSE,
fillOpacity = 0.7
)
# Ajouter les arêtes (lignes entre les noeuds)
edges_coords <- edges %>%
rowwise() %>%
mutate(
source_node = nodes[nodes$id == source, ],
target_node = nodes[nodes$id == target, ],
lng_coords = list(c(source_node$lon, target_node$lon)),
lat_coords = list(c(source_node$lat, target_node$lat))
)
View(nodes)
# Ajouter les polylines pour chaque arête
map <- map %>%
addPolylines(
data = edges_coords,
lng = ~lng_coords,
lat = ~lat_coords,
color = "blue",
weight = 2
)
# Ajouter les arêtes (lignes entre les noeuds)
edges_coords <- edges %>%
rowwise() %>%
mutate(
source_node = nodes[nodes$id == source, ],
target_node = nodes[nodes$id == target, ],
lng_coords = list(c(source_node$lon, target_node$lon)),
lat_coords = list(c(source_node$lat, target_node$lat))
)
nodes <- read_csv ("data/nodes_arbres.csv")
edges <- read_csv ("data/edges_arbres.csv")
# Carte de base avec Leaflet
map <- leaflet(nodes) %>%
addTiles() %>%
addCircleMarkers(
~lon, ~lat,  # coordonnées des noeuds
popup = ~paste("<b>", label, "</b><br>",
"<i>", precisions, "</i><br>", # Afficher le label en gras
"<img src='", image, "' width='100' height='100'><br>",  # Afficher l'image
"Origine de l'arbre : <b>", origine, "</b><br>",
descriptions),
radius = ~weight / 2,
color = "green",
stroke = FALSE,
fillOpacity = 0.7
)
# Ajouter les arêtes (lignes entre les noeuds)
edges_coords <- edges %>%
rowwise() %>%
mutate(
source_node = nodes[nodes$id == source, ],
target_node = nodes[nodes$id == target, ],
lng_coords = list(c(source_node$lon, target_node$lon)),
lat_coords = list(c(source_node$lat, target_node$lat))
)
# Ajouter les polylines pour chaque arête
map <- map %>%
addPolylines(
data = edges_coords,
lng = ~lng_coords,
lat = ~lat_coords,
color = "blue",
weight = 2
)
# Carte de base avec Leaflet
map <- leaflet(nodes) %>%
addTiles() %>%
addCircleMarkers(
~lon, ~lat,
popup = ~paste("<b>", label, "</b><br>",
"<i>", precisions, "</i><br>", # Afficher le label en gras
"<img src='", image, "' width='100' height='100'><br>",  # Afficher l'image
"Origine de l'arbre : <b>", origine, "</b><br>",
descriptions),
radius = ~weight / 2,
color = "green",
stroke = FALSE,
fillOpacity = 0.7
)
# Ajouter les arêtes (lignes entre les noeuds)
edges_coords <- edges %>%
rowwise() %>%
mutate(
source_node = nodes[nodes$id == source, ],
target_node = nodes[nodes$id == target, ],
lng_coords = list(c(source_node$lon, target_node$lon)),
lat_coords = list(c(source_node$lat, target_node$lat))
)
# Ajouter les polylines pour chaque arête
map <- map %>%
addPolylines(
data = edges_coords,
lng = ~lng_coords,
lat = ~lat_coords,
color = "blue",
weight = 2
)
# Afficher la carte
map
# Ajouter les polylines pour chaque arête
map <- map %>%
addPolylines(
data = edges_coords,
lng = ~lng_coords,
lat = ~lat_coords,
color = "blue",
weight = 25
)
# Vérifie si les colonnes lng_coords et lat_coords contiennent des données correctes
head(edges_coords$lng_coords)
head(edges_coords$lat_coords)
# Ajouter les arêtes (lignes entre les noeuds)
map <- map %>%
addPolylines(
data = edges,
lng = ~c(nodes[nodes$id == source, ]$lon, nodes[nodes$id == target, ]$lon),
lat = ~c(nodes[nodes$id == source, ]$lat, nodes[nodes$id == target, ]$lat),
color = "blue",
weight = 2
)
length(unique(nodes$id)) == nrow(nodes)
# Créer un tableau contenant les coordonnées de toutes les arêtes
edges_coords <- data.frame(
lon = c(nodes[nodes$id == edges$source, "lon"], nodes[nodes$id == edges$target, "lon"]),
lat = c(nodes[nodes$id == edges$source, "lat"], nodes[nodes$id == edges$target, "lat"])
)
library(ggplot2)
library(plotly)
table <- read.csv ("data/projet final s1.csv")
ggplot(data = table, aes(x = factor(arrondissement, levels = 1:20))) +
geom_bar(fill = "steelblue", color = "black") +
theme_minimal() +
xlab("Arrondissement") +
ylab("Nombre d'arbres")
# Créer le graphique ggplot
p <- ggplot(data = table, aes(x = factor(arrondissement, levels = 1:20))) +
geom_bar(aes(y = ..count..), fill = "steelblue", color = "black") +
theme_minimal() +
xlab("Arrondissement") +
ylab("Nombre d'arbres")
# Convertir le graphique ggplot en graphique interactif avec plotly
p_interactif <- ggplotly(p, tooltip = "y")
# Afficher le graphique interactif
p_interactif
